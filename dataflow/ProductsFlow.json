{
	"name": "ProductsFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "4dn-synapse-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "ProductsCsv"
				},
				{
					"linkedService": {
						"referenceName": "SqlPool",
						"type": "LinkedServiceReference"
					},
					"name": "DimProductsOrig"
				},
				{
					"linkedService": {
						"referenceName": "SqlPool",
						"type": "LinkedServiceReference"
					},
					"name": "DimBrands"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "SqlPool",
						"type": "LinkedServiceReference"
					},
					"name": "DimProducts"
				}
			],
			"transformations": [
				{
					"name": "BrandId"
				},
				{
					"name": "AddColumns"
				},
				{
					"name": "ProjectDimProducts"
				},
				{
					"name": "NotExists"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as long,",
				"          BrandName as string,",
				"          Name as string,",
				"          Price as decimal(10,2)",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'files',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     wildcardPaths:['sales_small/csv/products*']) ~> ProductsCsv",
				"source(output(",
				"          Id as long,",
				"          AlternateKey as long,",
				"          BrandId as long,",
				"          BrandName as string,",
				"          Name as string,",
				"          Price as decimal(10,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'synapseanalytics',",
				"     schemaName: 'Staging',",
				"     tableName: 'DimProducts',",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     staged: true) ~> DimProductsOrig",
				"source(output(",
				"          Id as long,",
				"          Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'synapseanalytics',",
				"     schemaName: 'Main',",
				"     tableName: 'DimBrands',",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     staged: true) ~> DimBrands",
				"ProductsCsv, DimBrands lookup(BrandName == DimBrands@Name,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> BrandId",
				"BrandId derive(AlternateKey = ProductsCsv@Id,",
				"          BrandId = DimBrands@Id) ~> AddColumns",
				"AddColumns select(mapColumn(",
				"          Id = ProductsCsv@Id,",
				"          Name = ProductsCsv@Name,",
				"          Price,",
				"          AlternateKey,",
				"          BrandId,",
				"          BrandName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ProjectDimProducts",
				"ProjectDimProducts, DimProductsOrig lookup(ProjectDimProducts@AlternateKey == DimProductsOrig@AlternateKey,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> NotExists",
				"NotExists sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'synapseanalytics',",
				"     schemaName: 'Staging',",
				"     tableName: 'DimProducts',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     allowCopyCommand: true,",
				"     staged: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Id = ProjectDimProducts@Id,",
				"          Name = ProjectDimProducts@Name,",
				"          Price = ProjectDimProducts@Price,",
				"          AlternateKey = ProjectDimProducts@AlternateKey,",
				"          BrandId = ProjectDimProducts@BrandId,",
				"          BrandName",
				"     )) ~> DimProducts"
			]
		}
	}
}