{
	"name": "M4_1_2 Load Data in the Warehous",
	"properties": {
		"folder": {
			"name": "Module 4.1"
		},
		"content": {
			"query": "COPY INTO Staging.DimProducts\n(Id 1, BrandName 2, Name 3, Price 4)\nFROM 'https://4dnsynapselake.dfs.core.windows.net/files/sales_small/csv/products*.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://4dnsynapselake.dfs.core.windows.net/files/'\n    ,IDENTITY_INSERT = 'OFF'\n)\nGO;\n\nCOPY INTO Staging.DimCustomers\n(Id 1, FirstName 2, LastName 3, CompanyName 4, StreetName 5, Number 6, City 7, Region 8, Country 9)\nFROM 'https://4dnsynapselake.dfs.core.windows.net/files/sales_small/csv/customers_*.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://4dnsynapselake.dfs.core.windows.net/files/'\n    ,IDENTITY_INSERT = 'OFF'\n)\nGO;\n\nCOPY INTO Staging.FactOrders\n(Id 1,  Quantity 2, TotalPrice 3, OrderDate 4, CustomerId 5, ProductId 6)\nFROM 'https://4dnsynapselake.dfs.core.windows.net/files/sales_small/csv/orders_*.csv'\nWITH\n(\n\tFILE_TYPE = 'CSV'\n\t,MAXERRORS = 0\n\t,FIRSTROW = 2\n\t,ERRORFILE = 'https://4dnsynapselake.dfs.core.windows.net/files/'\n)\nGO\n\n-- Next Update DimTables and update staging\n-- First the DimDates table. Can be time consuming\n-- Temp tables are really temp. Will be gone after execution so select the whole statment (better us this in a stored procedure)\nCREATE TABLE #TmpStageDate (DateVal DATE NOT NULL)\n\n-- Populate the temp table with a range of dates\nDECLARE @StartDate DATE;\nDECLARE @EndDate DATE;\nSET @StartDate='2019-01-01';\nSET @EndDate=GETDATE();\nDECLARE @LoopDate DATE = @StartDate;\nWHILE @LoopDate<=@EndDate\nBEGIN\n    INSERT INTO #TmpStageDate VALUES\n    (\n        @LoopDate\n    )\n    SET @LoopDate = DATEADD(dd, 1, @LoopDate)\nEND\n--SELECT * FROM #TmpStageDate\n\n-- Insert the dates and calculated attributes into the dimension table\nINSERT INTO Main.DimDates\nSELECT CAST(CONVERT(VARCHAR(8), DateVal, 112) as INT), -- date key\n    DateVal, --date alt key\n    Day(DateVal), -- day number of month\n    DATEPART(WEEKDAY, DateVal),\n\tDATENAME(WEEKDAY, DateVal),\n\tDATEPART(MONTH, DateVal),\n\tDATENAME(MONTH, DateVal),\n\tDATEPART(QUARTER, DateVal),\n\tDATEPART(YEAR, DateVal)\nFROM #TmpStageDate\nGO\n\nDROP TABLE #TmpStageDate\n\n-- Now the DimGeo table\nINSERT INTO Main.DimGeo\nSELECT DISTINCT City, Region, Country FROM Staging.DimCustomers\n\n-- The DimBrands\nINSERT INTO Main.DimBrands\nSELECT DISTINCT BrandName FROM Staging.DimProducts\n\nUPDATE Staging.DimCustomers\nSET GeoId = Main.DimGeo.Id, AlternateKey = Staging.DimCustomers.Id\nFROM Staging.DimCustomers\nINNER JOIN Main.DimGeo ON Staging.DimCustomers.City = Main.DimGeo.City\n\n-- Cusomers is ready. Move data to Main\nINSERT INTO Main.DimCustomers\nSELECT Id, AlternateKey, FirstName, LastName, CompanyName, StreetName, Number, GeoId FROM Staging.DimCustomers\n\nUPDATE Staging.DimProducts\nSET BrandId = Main.DimBrands.Id, AlternateKey = Staging.DimProducts.Id\nFROM Staging.DimProducts\nINNER JOIN Main.DimBrands ON Staging.DimProducts.BrandName = Main.DimBrands.Name\n\n-- Products is ready. Move data to Main scheme\nINSERT INTO Main.DimProducts\nSELECT Id, AlternateKey, BrandId, Name, Price FROM Staging.DimProducts\n\n-- Next update the staging FactOrders table\n-- Make sure the foreign keys reflect the IDENTITY columns in Main scheme\nUPDATE Staging.FactOrders \nSET OrderDateId = Main.DimDates.Id, CustomerId = Main.DimCustomers.Id, ProductId = Main.DimProducts.Id\nFROM Staging.FactOrders\nINNER JOIN Main.DimDates ON CAST(Staging.FactOrders.OrderDate AS DATE) = CAST(Main.DimDates.AltKey AS DATE)\nINNER JOIN Main.DimCustomers ON Staging.FactOrders.CustomerId = Main.DimCustomers.AlternateKey\nINNER JOIN Main.DimProducts ON Staging.FactOrders.ProductId = Main.DimProducts.AlternateKey\n\n-- Finally Copy the data\nINSERT INTO Main.FactOrders\nSELECT Id, OrderDateId, CustomerId, ProductId, Quantity, TotalPrice  FROM Staging.FactOrders\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "sqlpool",
				"poolName": "sqlpool"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}